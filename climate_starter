import numpy as np

import sqlalchemy
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import Session
from sqlalchemy import create_engine, func
import datetime as dt
from flask import Flask, jsonify


#################################################
# Database Setup
#################################################
engine = create_engine("sqlite:///Resources/hawaii.sqlite")

# reflect an existing database into a new model
Base = automap_base()
# reflect the tables
Base.prepare(autoload_with=engine)
session = Session(engine)

# Save reference to the table
station = Base.classes.station
measurement = Base.classes.measurement

#################################################
# Flask Setup
#################################################
app = Flask(__name__)


#################################################
# Flask Routes
#################################################

@app.route("/")
def home():

    return (
        f"/api/v1.0/precipitation <br/>"
        f"/api/v1.0/stations<br/>"
        f"/api/v1.0/tobs<br/>"
        f"/api/v1.0/<start> and /api/v1.0/<start>/<end>")

 
@app.route("/api/v1.0/precipitation") 
def precipitation(): 


# Create our session (link) from Python to the DB

    prev_year = dt.date(2017, 8, 23) - dt.timedelta(days=365) 
    # Convert the query results from precipitation analysis to a dictionary using date as the key and prcp as the value                                           
    results = session.query(measurement.date, measurement.prcp).\
        filter(measurement.date >= prev_year).all()
    
    session.close()
    precip = {date: prcp for date, prcp in results}

    print(precip)

    #return json representation of dictionary 
    #return jsonify(precip)
  

precipitation()

@app.route("/api/v1.0/stations") 
def stations(): 
    station_list = session.query(station.name).all()
    
    all_stations = list(np.ravel(station_list))

    print(all_stations)
    #json representation of dictionary 
    # return jsonify(all_stations)

stations() 

@app.route("/api/v1.0/tobs") 
def tobs(): 

    results_tobs = session.query(measurement.station, measurement.date, measurement.tobs).\
    filter(measurement.station == "USC00519281").\
    filter(measurement.date < '2017-08-23').\
    filter(measurement.date >'2016-08-23').all()  

    print(results_tobs)
#return json list of temp observations from previous year 
#return jsonify(results_tobs)
tobs()


@app.route("/api/v1.0/<start>")
def start(): 
    results = session.query(measurement.station, func.min(measurement.tobs), func.max(measurement.tobs), func.avg(measurement.tobs)).\
                            filter(measurement.date == "2017-06-15").all()
    
    print(results)
# return json list of min, avg, and max temp for specified start date 
# return jsonify(results) 

start()


@app.route("/api/v1.0/<start>/<end>")

def start_end():
    results = session.query(measurement.station, func.min(measurement.tobs), func.max(measurement.tobs), func.avg(measurement.tobs)).\
        filter(measurement.date > "2017-06-15").\
        filter(measurement.date < "2017-08-01"). all()
    
    print(results)

#return the min ,avg, and max temp for specified start and end date
#return jsonify(results)
start_end()

